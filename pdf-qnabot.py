# -*- coding: utf-8 -*-
"""pdf-qnabot

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fj1PtGdnnAip1fMVXpCiMv_BVrS6hKEm
"""

#!pip install streamlit langchain langchain_community openai PyPDF2 faiss-cpu tiktoken

import os
import streamlit as st
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings.openai import OpenAIEmbeddings
from langchain.vectorstores import FAISS
from langchain.chains.question_answering import load_qa_chain
from langchain.llms import OpenAI
from PyPDF2 import PdfReader
import tiktoken

# OpenAI API 키 가져오기
openai_api_key = st.secrets["openai_api_key"]
os.environ["OPENAI_API_KEY"] = openai_api_key

# Streamlit 앱 설정
st.set_page_config(page_title="PDF 기반 Q&A 챗봇")
st.header("PDF 기반 Q&A 챗봇")

# OpenAI API 키 설정
openai_api_key = st.secrets["OPENAI_API_KEY"]

# PDF 업로드
pdf = st.file_uploader("PDF 파일을 업로드하세요", type="pdf")

# 전역 변수로 질문-답변 기록 저장
if "qa_history" not in st.session_state:
    st.session_state.qa_history = []

if pdf is not None:
    pdf_reader = PdfReader(pdf)
    text = ""
    for page in pdf_reader.pages:
        text += page.extract_text()

    # 텍스트 분할
    text_splitter = CharacterTextSplitter(
        separator="\n",
        chunk_size=1000,
        chunk_overlap=200,
        length_function=len
    )
    chunks = text_splitter.split_text(text)

    # 임베딩 생성 및 벡터 저장소 생성
    embeddings = OpenAIEmbeddings(openai_api_key=openai_api_key)
    knowledge_base = FAISS.from_texts(chunks, embeddings)

    # 사용자 질문 입력
    user_question = st.text_input("PDF 내용에 대해 질문하세요:")

    if user_question:
        docs = knowledge_base.similarity_search(user_question)
        llm = OpenAI(openai_api_key=openai_api_key)
        chain = load_qa_chain(llm, chain_type="stuff")
        response = chain.run(input_documents=docs, question=user_question)

        # 질문과 답변을 기록에 추가
        st.session_state.qa_history.append({"question": user_question, "answer": response})

        # 답변 표시
        st.write("답변:", response)

    # 이전 질문과 답변 표시
    if st.session_state.qa_history:
        st.subheader("이전 질문과 답변")
        for qa in st.session_state.qa_history:
            st.write(f"Q: {qa['question']}")
            st.write(f"A: {qa['answer']}")
            st.write("---")
